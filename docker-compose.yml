# version: "3.3"

services:
  web:
    build: .
    image: web
    container_name: web
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    restart: unless-stopped
  spot:
    image: web
    container_name: spot
    command: sh -c "python manage.py spotengine"
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - web

  nginx:
    container_name: nginx
    image: nginx
    restart: always
    working_dir: /nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./static:/nginx/static
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./app.crt:/etc/app.crt
      - ./app.key:/etc/app.key
    # depends_on:
    #   - app-web

  # app-celery-internal-worker:
  #   image: app-web
  #   container_name: app-celery-internal-worker
  #   command: sh -c "celery -A app worker -l INFO -Ofair --concurrency=4 -n app-worker"
  #   depends_on:
  #     - app-web
  #   restart: unless-stopped
  #   environment:
  #     - ENVIRONMENT=development
  #   env_file:
  #     - .env

  # app-rabbitmq:
  #   container_name: app-rabbitmq
  #   hostname: rabbitmq
  #   image: rabbitmq:3.12-management
  #   restart: on-failure 
  #   ports:
  #     # - "5672:5672"
  #     - "15672:15672"

  zoo1:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zoo1
    restart: always
    container_name: zoo1
    # ports:
    #   - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.7.1
    restart: always
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://kafka1:9092,DOCKER://host.docker.internal:29092
      # KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_API_VERSION_REQUEST: "false"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zoo1


  app-db:
    container_name: app-db
    image: postgres:13.11-bullseye
    restart: on-failure
    volumes:
      - be1000-app-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
  app-redis:
    image: redis:latest
    command: redis-server --appendonly yes --replica-read-only no
    container_name: app-redis
    restart: on-failure
    ports:
      - "127.0.0.1:6379:6379"
    
volumes:
  be1000-app-db-data:
